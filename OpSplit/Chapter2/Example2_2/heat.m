function u=heat(u,t,dir)%%% Numerically solves the heat equation (for a time |t|)% % $$u_t = u_{xx}$$% % with initial data |u| and periodic boundary conditions by a spectral % differentiation method. |u| must be a matrix and |x| is a coordinate in% the column direction if |dir=1| and in the row direction if |dir==2|.% Default is |dir=1|. %% Initial setupif (dir>2),	error('Only 2D diffusions allowed');end;transpose=0;S=size(u);N=S(1);if (N==1),	u=u';	transpose=1;end;if nargin<3,	dir=1;end;if (dir==2)	u=u';	transpose=1;end;S=size(u);N=S(1);if (mod(N,2)~=0),	error('Not even length');end;%%% Using a spectral scheme to solve the 1D heat equation for % each column of u. n=[0:N/2-1 0 -N/2+1:-1]';e=ones(1,S(2));uhat=fft(u);uhat=(exp(-t.*n.^2)*e).*uhat;u=real(ifft(uhat));if (transpose)	u=u';end;